package io.github.herrromich.famoney.commons.persistence.migration

import java.sql.Connection
import java.sql.PreparedStatement
import java.sql.SQLException
import java.sql.Statement


abstract class JdbcMigrationStetemnets(
) : AutoCloseable {
    protected abstract val connection: Connection
    private val statements: MutableList<PreparedStatement> = mutableListOf()

    private fun prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement {
        return try {
            connection.prepareStatement(
                sql,
                autoGeneratedKeys
            ).also(statements::add)
        } catch (ex: SQLException) {
            throw MigrationException("Cannot prepare statement from sql\n\r : $sql.", ex)
        }
    }

    protected fun getStatement(sql: String) = getStatement(sql, Statement.NO_GENERATED_KEYS)

    protected fun getStatementWithGeneratedKeys(sql: String) = getStatement(sql, Statement.RETURN_GENERATED_KEYS)

    protected fun getStatement(sql: String, generatedKeys: Int) =
        prepareStatement(
            sql,
            generatedKeys
        )

    override fun close() {
        statements.forEach(PreparedStatement::close)
    }
}