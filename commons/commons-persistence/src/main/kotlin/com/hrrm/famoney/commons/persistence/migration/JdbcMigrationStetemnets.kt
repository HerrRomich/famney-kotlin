package com.hrrm.famoney.commons.persistence.migration

import org.springframework.core.io.ResourceLoader
import java.io.IOException
import java.nio.charset.StandardCharsets
import java.sql.Connection
import java.sql.PreparedStatement
import java.sql.SQLException
import java.sql.Statement


abstract class JdbcMigrationStetemnets(
) : AutoCloseable {
    protected abstract val connection: Connection
    protected abstract val basePath: String
    protected abstract val resourceLoader: ResourceLoader

    private val namedPreparedStatements = mutableMapOf<String, PreparedStatement>()

    private val baseURI by lazy {
        resourceLoader.getResource(basePath).uri
    }

    private fun prepareStatement(path: String, autoGeneratedKeys: Int): PreparedStatement {
        var sql = ""
        return try {
            sql = baseURI.resolve("path").toURL().readText(StandardCharsets.UTF_8)
            connection.prepareStatement(
                sql,
                autoGeneratedKeys
            )
        } catch (ex: SQLException) {
            throw MigrationException("Cannot prepare statement from sql\n\r : $sql.", ex)
        } catch (ex: IOException) {
            throw MigrationException("Cannot load resource with SQL statement: $path from classpath.", ex)
        }
    }

    protected fun getStatement(path: String) = getStatement(path, Statement.NO_GENERATED_KEYS)

    protected fun getStatementWithGeneratedKeys(path: String) = getStatement(path, Statement.RETURN_GENERATED_KEYS)

    protected fun getStatement(path: String, generatedKeys: Int) =
        namedPreparedStatements.getOrPut(
            path
        ) {
            prepareStatement(
                path,
                generatedKeys
            )
        }

    override fun close() {
        namedPreparedStatements.values.forEach(PreparedStatement::close)
    }
}